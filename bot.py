import asyncio
import os
import aiosqlite

from dotenv import load_dotenv
from parser import Parser
from utils import text_redactor
from telegram.ext import ApplicationBuilder
load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')
MY_CHAT_ID = int(os.getenv('MY_CHAT_ID'))

async def send_message(application) -> None:
    async with aiosqlite.connect("projects.db") as db:
        while True:
            db.row_factory = aiosqlite.Row
            async with db.execute(
                "SELECT * FROM projects WHERE already_sent = 0"
            ) as cursor:
                rows = await cursor.fetchall()

            for row in rows:
                await application.bot.send_message(
                    chat_id=MY_CHAT_ID,
                    text=(
                        f"üìù–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ Kwork\n\n"
                        f"üì¢–ù–∞–∑–≤–∞–Ω–∏–µ: {row['title']}\n"
                        f"üíµ–¶–µ–Ω–∞: {row['price']}‚ÇΩ\n"
                        f"üí∏–î–æ–ø—É—Å—Ç–∏–º–æ –¥–æ: {row['possible_price_limit']}‚ÇΩ\n\n"
                        f"üìí–û–ø–∏—Å–∞–Ω–∏–µ: {text_redactor(row['description'])}\n\n"
                        f"üîó–°—Å—ã–ª–∫–∞: https://kwork.ru/projects/{row['id']}/view\n"
                    )
                )
                await db.execute(
                    "UPDATE projects SET already_sent = 1 WHERE id = ?",
                    (row['id'],)
                )
            await db.commit()

            await asyncio.sleep(10)

async def post_init(application):
    parser = Parser()
    await parser.init()
    asyncio.create_task(parser.parse())
    print("–û—Ç—Å—ã–ª–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
    asyncio.create_task(send_message(application))

def main() -> None:
    app = ApplicationBuilder().token(TOKEN).post_init(post_init).build()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == '__main__':
    main()
